%!PS-Adobe-2.0
%%Title: Pseudo-Cupoalic Prismatoid 4/3 | 4/3
%%Creator: PS.py written by marcelteun
%%Pages: 4 1
%%BoundingBox: 0 0 595 842
% %%BoundingBox: -595 -842 1100 1700
%%EndComments
%%BeginProlog
(polygons.eps) run
(fonts.eps) run
polygons begin
  /scaling_size 80 def
  /gray_value 0.2 def
  /edge_to_edge_offset_mm 1 mm2pt def
  % set if_show_base to true if you want to see the A4 area drawn
  /if_show_a4_area false def
  % set if_show_base to true if you want to see one whole face with vertex numbers
  /if_show_base false def
  % then define the base face number here to decide which one to show:
  /base_face_no 0 def
  /xy_offset {20 40} def
  /local_dict_size 16 def

  % the two squares
  /vertices0 [
    [1 1] % 0
    [-1 1] % 1
    [-1 -1] % 2
    [1 -1] % 3
  ] def
  /faces0 [
    [0 1 2 3]
  ] def
  /bbox0 [-1.05 -1.05 1.05 1.05] def
  /vertices0 vertices0 scaling_size vertices_scale def
  /vs0 vertices0 0.000001 vertices_make_unique def
  %/vs0 vs0 47 48 6 7 vertices_add_intersection def

  /square_0 vs0 [0 1 2 3] cv_vertices def

  /square_sub_0
    square_0
    dup 2 vertices_get
    xy_neg vertices_translate
  def
  /square_sub_1
    square_sub_0 3
    square_0 2 1
    vertices_edge_attach_to
  def
  /squares [
    square_sub_0 white polygon_create
    square_sub_1 white polygon_create
    net_create
  def

  % two crossed squares paired (two needed)
  /vertices1 [
    [1 1] % 0
    [-1 1] % 1
    [-1 -1] % 2
    [1 -1] % 3
  ] def
  /faces1 [
    [0 1 2 3]
  ] def
  /bbox1 [-1.05 -1.05 1.05 1.05] def
  /vertices1 vertices1 scaling_size vertices_scale def
  /vs1 vertices1 0.000001 vertices_make_unique def
  /vs1 vs1 0 2 1 3 vertices_add_intersection def

  /c_square_0 vs1 [4 0 1] cv_vertices def

  % Define combined sub parts:
  /c_square_sub_0
    c_square_0
    dup 2 vertices_get
    xy_neg vertices_translate
  def
  /c_square_sub_1
    c_square_sub_0 2
    c_square_0 1 0
    vertices_edge_attach_to
  def
  /c_square_sub_2
    c_square_sub_1 2
    c_square_0 1 0
    vertices_edge_attach_to
  def
  /c_square_sub_3
    c_square_sub_2 2
    c_square_0 1 0
    vertices_edge_attach_to
  def
  /c_square_sub_4
    c_square_sub_3 1
    c_square_0 2 1
    vertices_edge_attach_to
  def
  /c_square_sub_5
    c_square_sub_4 2
    c_square_0 1 0
    vertices_edge_attach_to
  def
  /c_square_sub_6
    c_square_sub_5 2
    c_square_0 1 0
    vertices_edge_attach_to
  def
  /c_square_sub_7
    c_square_sub_6 2
    c_square_0 1 0
    vertices_edge_attach_to
  def
  /c_squares [
    c_square_sub_0 white polygon_create
    c_square_sub_1 white polygon_create
    c_square_sub_2 white polygon_create
    c_square_sub_3 white polygon_create
    c_square_sub_4 white polygon_create
    c_square_sub_5 white polygon_create
    c_square_sub_6 white polygon_create
    c_square_sub_7 white polygon_create
    net_create
  def

  % the rectangles meeting at the centre
  /vertices2 [
    [1.4142135623730951 1] % 0
    [-1.41421356237309511 1] % 1
    [-1.41421356237309511 -1] % 2
    [1.41421356237309511 -1] % 3
    [0 1] % 4
    [0 -1] % 5
  ] def
  /faces2 [
    [0 1 2 3]
  ] def
  /bbox2 [-1.42 -1.42 1.42 1.42] def
  /vertices2 vertices2 scaling_size vertices_scale def
  /vs2 vertices2 0.000001 vertices_make_unique def
  /vs2 vs2 0 2 1 3 vertices_add_intersection def % 6

  /rect_0 vs2 [6 0 4] cv_vertices def
  /rect_1 vs2 [6 4 1] cv_vertices def
  /rect_2 vs2 [6 1 2] cv_vertices def

  /rect_sub_0
    rect_0
  def
  /rect_sub_1
    rect_sub_0 2
    rect_1 1 0
    vertices_edge_attach_to
  def
  /rect_sub_2
    rect_sub_1 2
    rect_2 1 0
    vertices_edge_attach_to
  def
  /rect_sub_3
    rect_sub_2 2
    rect_0 1 0
    vertices_edge_attach_to
  def
  /rect_sub_4
    rect_sub_3 2
    rect_1 1 0
    vertices_edge_attach_to
  def
  /rect_sub_5
    rect_sub_4 2
    rect_2 1 0
    vertices_edge_attach_to
  def

  /rect [
    rect_sub_0 white polygon_create
    rect_sub_1 white polygon_create
    rect_sub_2 white polygon_create
    rect_sub_3 white polygon_create
    rect_sub_4 white polygon_create
    rect_sub_5 white polygon_create
    net_create
  def

  /a4_area {
    if_show_a4_area {
      0 0 595 842 rectstroke
    } if
  } bind def
  /show_base_face {
    if_show_base {
      gsave
        xy_offset translate
        bbox 0 get scaling_size mul neg
        bbox 1 get scaling_size mul neg
        translate
        faces aload length { %repeat
          dup 0 get
          vertices exch get
          aload pop
          moveto
          aload length 1 sub { %repeat
            vertices exch get
            aload pop
            lineto
          } repeat
          pop
          closepath stroke
        } repeat
        vs vertices_show_nos
      grestore
    } if
  } bind def

  /def_base_face {
    % Choose the right vertices, faces etc for the show_base_face function
    /put_digit { % (abc..) d
      % replace the last character in string (abc..) with the integer 'd'
      % for which should hold 0 <= d <= 9, i.e. d is a digit
      1 index dup length 1 sub  % (abc..) d (abc..) 4
      48 % this is the ASCII code for the character '0'
      4 -1 roll add % (abc..) (abc..) 4 48+d
      put % (abc.d)
    } bind def
    /vertices
      (vertices?) base_face_no put_digit
      cvn load
    def
    /vs (vs?) base_face_no put_digit cvn load def
    /faces (faces?) base_face_no put_digit cvn load def
    /bbox (bbox?) base_face_no put_digit cvn load def
  } bind def

  def_base_face

end
%%EndProlog
[
  /Author (Marcel T"unnissen)
  /Title (Pseudo-Cupoalic Prismatoid 4/3 | 4/3)
  /DOCINFO
pdfmark

%%Page: 1 1
%%BeginPage
polygons begin
  a4_area
  local_dict_size dict begin
    .1 setlinewidth
    30 667 translate
    squares net_cut
    showpage
  end % local dict
end % polygons
%%EndPage

%%Page: 2 2
%%BeginPage
polygons begin
  a4_area
  %0 -0.7 cm2pt translate
  local_dict_size dict begin
    .1 setlinewidth
    30 830 translate
    c_squares net_cut
    showpage
  end % local dict
end % polygons
%%EndPage

%%Page: 3 3
%%BeginPage
polygons begin
  a4_area
  local_dict_size dict begin
    /dx 3 scaling_size mul def
    /dy -2.10 scaling_size mul def
    .1 setlinewidth
    148 750 translate
    2 { % repeat
      rect net_cut
      gsave
        dx 0 translate
        rect net_cut
      grestore
      0 dy translate
    } repeat
    showpage
  end % local dict
end % polygons
%%EndPage

%%Page: 4 4
%%BeginPage
polygons begin
  a4_area
  .1 setlinewidth
  local_dict_size dict begin
    /if_show_base true def
    /base_face_no 0 def
    def_base_face
    show_base_face

    /dy 2.1 scaling_size mul def

    0 dy translate
    /base_face_no 1 def
    def_base_face
    show_base_face

    0 dy translate
    /base_face_no 2 def
    def_base_face
    show_base_face

    showpage
  end % local dict
end % polygons
%%EndPage

%%Tailer
%%EOF
